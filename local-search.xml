<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>iOS项目开发需要导进的常用第三方库</title>
    <link href="/2022/09/20/iOS%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E9%9C%80%E8%A6%81%E5%AF%BC%E8%BF%9B%E7%9A%84%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    <url>/2022/09/20/iOS%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E9%9C%80%E8%A6%81%E5%AF%BC%E8%BF%9B%E7%9A%84%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p><strong><a href="https://github.com/ibireme/YYKit">YYKit</a></strong>  多功能组件</p><p><strong><a href="https://github.com/MakeZL/MLPhotoLib">MLPhotoLib</a> <a href="https://github.com/banchichen/TZImagePickerController">TZImagePickerController</a></strong> <a href="https://github.com/mwaterfall/MWPhotoBrowser">MWPhotoBrowser</a> <a href="https://github.com/ideaismobile/IDMPhotoBrowser">IDMPhotoBrowser</a>  <a href="https://github.com/chiunam/CTAssetsPickerController">CTAssetsPickerController</a> <strong><a href="https://github.com/skx926/KSPhotoBrowser">KSPhotoBrowser</a>  <a href="https://github.com/jaredsinclair/JTSImageViewController">JTSImageViewController</a></strong>  图片选择、浏览</p><p><strong><a href="https://github.com/hackiftekhar/IQKeyboardManager">IQKeyboardManager</a>  <a href="https://github.com/michaeltyson/TPKeyboardAvoiding">TPKeyboardAvoiding</a></strong>   键盘遮挡输入框的处理</p><p><strong><a href="https://github.com/MortimerGoro/MGSwipeTableCell">MGSwipeTableCell</a></strong>   <strong><a href="https://github.com/alikaragoz/MCSwipeTableViewCell">MCSwipeTableViewCell</a></strong>  cell的左右按钮</p><p><strong><a href="https://github.com/Draveness/DKNightVersion">DKNightVersion</a></strong> 夜间模式</p><p><strong><a href="https://github.com/ninjinkun/NJKWebViewProgress">NJKWebViewProgress</a></strong>  webview的进度条指示</p><p><strong><a href="https://github.com/raozhizhen/JMRoundedCorner">JMRoundedCorner</a></strong>  UIView设置不触发离屏渲染的圆角</p><p><strong><a href="https://github.com/STShenZhaoliang/STPickerView">STPickerView</a></strong>  一个多功能的选择器,有城市选择，日期选择和单数组源自定的功能，方便大家的使用,低耦合,易扩展</p><p><strong><a href="https://github.com/realm/realm-cocoa">realm-cocoa</a></strong>  对象数据库</p><p><strong><a href="https://github.com/Aufree/Hodor">Hodor</a></strong>   是一套可让你的应用快速支持本地化的解决方案, 允许你在应用内直接更改应用语言而无需退出应用, 类似微信.</p><p><strong><a href="https://github.com/NghiaTranUIT/FeSpinner">FeSpinner</a></strong>  一套炫酷的loading视图</p><p><strong><a href="https://github.com/jverdi/JVFloatLabeledTextField">JVFloatLabeledTextField</a></strong>  浮动title的输入框</p><p><strong><a href="https://github.com/schneiderandre/popping">popping</a></strong> 动画集合</p><p><strong><a href="https://github.com/MatthewYork/MYBlurIntroductionView">MYBlurIntroductionView</a></strong>  <strong><a href="https://github.com/mamaral/Onboard">Onboard</a></strong>  <strong><a href="https://github.com/ealeksandrov/EAIntroView">EAIntroView</a></strong>  引导页</p><p><strong><a href="https://github.com/ViccAlexander/Chameleon">Chameleon</a></strong>  色彩框架</p><p><strong><a href="https://github.com/RuiAAPeres/UIViewController-Swizzled">UIViewController-Swizzled</a></strong>  打印视图控制器的路径</p><p><strong><a href="https://github.com/intuit/LocationManager">LocationManager</a></strong>  快速定位</p><p><strong><a href="https://github.com/arashpayan/appirater">appirater</a></strong>  提醒用户给APP打分</p><p><strong><a href="https://github.com/cwRichardKim/RKNotificationHub">RKNotificationHub</a></strong>   给UIView加上badge</p><p><strong><a href="https://github.com/xmartlabs/XLForm">XLForm</a></strong>   is the most flexible and powerful iOS library to create dynamic table-view forms.</p><p><strong><a href="https://github.com/agdsdl/DLSlideView">DLSlideView</a></strong>   DLSlideView对常见的顶部Tab页点击、滑动分页做了封装。 它使用基于ViewController的container特性</p><p><strong><a href="https://github.com/TTTAttributedLabel/TTTAttributedLabel">TTTAttributedLabel</a></strong>   A drop-in replacement for UILabel that supports attributes, data detectors, links, and more</p><p><strong><a href="https://github.com/gsdios/SDCycleScrollView">SDCycleScrollView</a></strong>   “iOS第一图片轮播器” 无限循环图片轮播器。</p><p><strong><a href="https://github.com/wwdc14/HySubmitTransitionObjective-C">HySubmitTransitionObjective-C</a></strong>   用于登录按钮的OC版的转场动画</p><p><strong><a href="https://github.com/KrauseFx/TSMessages">TSMessages</a></strong>  <strong><a href="https://github.com/cruffenach/CRToast">CRToast</a></strong>   Easy to use and customizable messages&#x2F;notifications for iOS</p><p><strong><a href="https://github.com/jaydee3/JDStatusBarNotification">JDStatusBarNotification</a></strong>   状态栏通知</p><p><strong><a href="https://github.com/facebook/KVOController">KVOController</a></strong>   Simple, modern, thread-safe key-value observing for iOS—-Facebook</p><p><strong><a href="https://github.com/bryankeller/BLKFlexibleHeightBar">BLKFlexibleHeightBar</a></strong>   Create condensing header bars like those seen in the Facebook Safari iOS apps.</p><p><strong><a href="https://github.com/mattt/FormatterKit">FormatterKit</a></strong>  常用format集合</p><p><strong><a href="https://github.com/zwaldowski/BlocksKit">BlocksKit</a></strong>    block风格封装</p><p><strong><a href="https://github.com/shaojiankui/iOS-Categories">iOS-Categories</a></strong>   分类集合</p><p><strong><a href="https://github.com/Grouper/FlatUIKit">FlatUIKit</a></strong>    A collection of awesome flat UI components for iOS.</p><p><strong><a href="https://github.com/coolnameismy/BabyBluetooth">BabyBluetooth</a></strong>   CoreBluetooth封装，蓝牙开发</p><p><strong><a href="https://github.com/marcuswestin/WebViewJavascriptBridge">WebViewJavascriptBridge</a></strong>   js和oc交互</p><p><strong><a href="https://github.com/SVProgressHUD/SVProgressHUD">SVProgressHUD</a></strong>  <strong><a href="https://github.com/jdg/MBProgressHUD">MBProgressHUD</a></strong>  提示框</p><p><a href="https://github.com/liyong03/YLGIFImage">YLGIFImage</a>   动态图，sdwebimage自带的也可以</p><p><strong><a href="https://github.com/jamztang/CSStickyHeaderFlowLayout">CSStickyHeaderFlowLayout</a></strong>   UICollectionView replacement of UITableView. Do even more like Parallax Header, Sticky Section Header</p><p><a href="https://github.com/recruit-mp/RMPZoomTransitionAnimator">RMPZoomTransitionAnimator</a>   <a href="https://github.com/mayuur/MJTransitionEffect">MJTransitionEffect</a>   列表到详情界面的转场动画</p><p><a href="https://github.com/Sephiroth87/ODRefreshControl">ODRefreshControl</a>  QQ下拉刷新样式控件</p><p><a href="https://github.com/12207480/TYAlertController">TYAlertController</a>  <a href="https://github.com/nimati/FCAlertView">FCAlertView</a>  自定义弹窗</p><p><a href="https://github.com/li6185377/LKDBHelper-SQLite-ORM">LKDBHelper-SQLite-ORM</a>  <a href="https://github.com/yuantiku/YTKKeyValueStore">YTKKeyValueStore</a>   数据库</p><p><a href="https://github.com/ko1o/PYSearch">PYSearch</a>  搜索功能</p><p><a href="https://github.com/CoderZhuXH/XHLaunchAd">XHLaunchAd</a>  启动广告</p><p><a href="https://github.com/yuantiku/YTKNetwork">YTKNetwork</a>  网络请求</p><p><a href="https://github.com/tianzhuo112/VTMagic">VTMagic</a>  滑动分页</p><p><a href="https://github.com/chasseurmic/TWRDownloadManager">TWRDownloadManager</a>  下载工具</p><p><a href="https://github.com/kevinzhow/PNChart">PNChart</a>  图表</p><p><a href="https://github.com/iTofu/LCActionSheet">LCActionSheet</a>   微博、微信的ActionSheet</p><p><a href="https://github.com/WenchaoD/FSCalendar">FSCalendar</a>  日历</p><p><a href="https://github.com/HeshamMegid/HMSegmentedControl">HMSegmentedControl</a>   自定义segment</p><p><a href="https://github.com/devedbox/AXWebViewController">AXWebViewController</a>   微信样式webView</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS 转场动画：以Push方式实现Present跳转</title>
    <link href="/2022/09/16/iOS-%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%EF%BC%9A%E4%BB%A5Push%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0Present%E8%B7%B3%E8%BD%AC/"/>
    <url>/2022/09/16/iOS-%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%EF%BC%9A%E4%BB%A5Push%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0Present%E8%B7%B3%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="iOS-转场动画：以Push方式实现Present跳转"><a href="#iOS-转场动画：以Push方式实现Present跳转" class="headerlink" title="iOS 转场动画：以Push方式实现Present跳转"></a>iOS 转场动画：以Push方式实现Present跳转</h2><p>在iOS开发中，页面跳转一般有两种方式：</p><ul><li>navigation：push &amp; pop，动画是从右到左</li><li>modal（模态）：presnet &amp; dismiss，动画是从下到上</li></ul><p>在SDK开发中，由于需要减小侵入性，通常会使用modal方式弹出SDK的页面，那么默认唤起的动画就是从下到上。现在有一个需求，需要从右到左唤起SDK的页面，所以我们需要用到转场动画，将present的动画改成从右到左，也就是以Push方式实现Present跳转。</p><h3 id="开始前"><a href="#开始前" class="headerlink" title="开始前"></a>开始前</h3><p>实现模态的转场动画的步骤，大概分以下几步：</p><ol><li><p>自定义一个遵循的<code>&lt;UIViewControllerAnimatedTransitioning&gt;</code>协议的动画转场管理对象，并实现两个必须实现的方法：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">//返回动画时间  </span><br>- (<span class="hljs-built_in">NSTimeInterval</span>)transitionDuration:(<span class="hljs-keyword">nullable</span> <span class="hljs-type">id</span> &lt;<span class="hljs-built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext;<br><span class="hljs-comment">//所有的转场动画事务都在这个方法里面完成</span><br>- (<span class="hljs-type">void</span>)animateTransition:(<span class="hljs-type">id</span> &lt;<span class="hljs-built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext;<br></code></pre></td></tr></table></figure></li><li><p>成为相应的代理，实现相应的代理方法，返回上面的自定义协议对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">//返回一个管理prenent动画转场的对象<br> - (nullable id &lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source;<br> //返回一个管理dismiss动画转场的对象<br> - (nullable id &lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForDismissedController:(UIViewController *)dismissed;<br></code></pre></td></tr></table></figure></li><li><p>vc调用presentViewController、dismissViewControllerAnimated时开启 animated</p></li></ol><p>下面按照这个步骤来实现功能</p><h3 id="WBHCPushAnimatedTransition"><a href="#WBHCPushAnimatedTransition" class="headerlink" title="WBHCPushAnimatedTransition"></a>WBHCPushAnimatedTransition</h3><p>创建一个类 <code>WBHCPushAnimatedTransition</code> 来封装转场动画</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">typedef NS_ENUM(NSUInteger, WBHCPushAnimatedTransitionType) &#123;<br>    WBHCPushAnimatedTransitionTypePresent, // 管理present动画<br>    WBHCPushAnimatedTransitionTypeDismiss  // 管理dismiss动画<br>&#125;;<br><br>/// 动画转场，以push动画实现present dismiss<br>@interface WBHCPushAnimatedTransition : NSObject&lt;UIViewControllerAnimatedTransitioning&gt;<br><br>- (instancetype)initWithTransitionType:(WBHCPushAnimatedTransitionType)type;<br><br>@end<br></code></pre></td></tr></table></figure><p>实现系统的 <code>UIViewControllerAnimatedTransitioning</code> 协议</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">- (NSTimeInterval)transitionDuration:(id&lt;UIViewControllerContextTransitioning&gt;)transitionContext &#123;<br>    return 0.25;<br>&#125;<br><br>- (void)animateTransition:(id&lt;UIViewControllerContextTransitioning&gt;)transitionContext &#123;<br>    switch (_type) &#123;<br>        case WBHCPushAnimatedTransitionTypePresent:<br>            [self presentAnimation:transitionContext];<br>            break;<br>        case WBHCPushAnimatedTransitionTypeDismiss:<br>            [self dismissAnimation:transitionContext];<br>            break;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现present动画，实际就是使用UIView动画来改变 fromVC 和 toVC 的 view 的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">- (void)presentAnimation:(id&lt;UIViewControllerContextTransitioning&gt;)transitionContext &#123;<br>    /**<br>     A present to B. fromVC = A, toVC = B<br>     */<br>    UIViewController *fromVC = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];<br>    UIViewController *toVC = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];<br><br>    UIView *containerView = [transitionContext containerView];<br>    [containerView addSubview:fromVC.view];<br>    [containerView addSubview:toVC.view];<br>    <br>    toVC.view.frame = CGRectMake(containerView.bounds.size.width, 0, containerView.bounds.size.width, containerView.bounds.size.height);<br>    [UIView animateWithDuration:[self transitionDuration:transitionContext] delay:0 options:UIViewAnimationOptionCurveEaseInOut animations:^&#123;<br>        fromVC.view.transform = CGAffineTransformMakeTranslation(-containerView.bounds.size.width / 3, 0);<br>        toVC.view.transform = CGAffineTransformMakeTranslation(-containerView.bounds.size.width, 0);<br>    &#125; completion:^(BOOL finished) &#123;<br>        [transitionContext completeTransition:![transitionContext transitionWasCancelled]];<br>    &#125;];<br>&#125;<br></code></pre></td></tr></table></figure><p>实现dismiss动画，和上面的present动画相反，将fromVC 和 toVC 的 view 的位置还原</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">- (void)dismissAnimation:(id&lt;UIViewControllerContextTransitioning&gt;)transitionContext &#123;<br>    /**<br>     B dismiss to A. fromVC = B, toVC = A<br>     */<br>    UIViewController *fromVC = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];<br>    UIViewController *toVC = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];<br>    <br>    UIView *containerView = [transitionContext containerView];<br>    [containerView addSubview:toVC.view];<br>    [containerView addSubview:fromVC.view];<br>    <br>    [UIView animateWithDuration:[self transitionDuration:transitionContext] delay:0 options:UIViewAnimationOptionCurveEaseInOut animations:^&#123;<br>        fromVC.view.transform = CGAffineTransformIdentity;<br>        toVC.view.transform = CGAffineTransformIdentity;<br>    &#125; completion:^(BOOL finished) &#123;<br>        [transitionContext completeTransition:![transitionContext transitionWasCancelled]];<br>    &#125;];<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，整个转场动画的封装就完成了，下面来实现代理</p><h3 id="实现代理"><a href="#实现代理" class="headerlink" title="实现代理"></a>实现代理</h3><p>在要present出来的vc中实现系统代理 <code>UIViewControllerTransitioningDelegate</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">// 设置代理<br>self.transitioningDelegate = self;<br><br><br>#pragma mark - UIViewControllerTransitioningDelegate<br>- (nullable id &lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source &#123;<br>    return [[WBHCPushAnimatedTransition alloc] initWithTransitionType:WBHCPushAnimatedTransitionTypePresent];<br>&#125;<br><br>- (nullable id &lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForDismissedController:(UIViewController *)dismissed &#123;<br>    return [[WBHCPushAnimatedTransition alloc] initWithTransitionType:WBHCPushAnimatedTransitionTypeDismiss];<br>&#125;<br></code></pre></td></tr></table></figure><p>这样的话，整个功能就基本实现了</p><p>但是，体验上还缺少一点：没有侧滑返回。所以，接下来，我们实现侧滑返回的交互转场</p><h3 id="WBHCPopInteractiveTransition"><a href="#WBHCPopInteractiveTransition" class="headerlink" title="WBHCPopInteractiveTransition"></a>WBHCPopInteractiveTransition</h3><p>创建一个继承自 <code>UIPercentDrivenInteractiveTransition</code> 的类 <code>WBHCPopInteractiveTransition</code> 来封装交互转场</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">/// 交互转场，以pop侧滑返回方式实现dismiss<br>@interface WBHCPopInteractiveTransition : UIPercentDrivenInteractiveTransition<br><br>/// 记录是否开始手势，判断dismiss操作是手势触发还是返回键触发<br>@property (nonatomic, assign) BOOL isTransitioning;<br><br>- (instancetype)initWithViewController:(UIViewController *)viewController;<br><br>@end<br></code></pre></td></tr></table></figure><p>为传入的vc添加拖动手势</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">- (instancetype)initWithViewController:(UIViewController *)viewController &#123;<br>    self = [super init];<br>    if (self) &#123;<br>        _viewControllerDismissing = viewController;<br>        [self addPanGestureForViewController:viewController];<br>    &#125;<br>    return self;<br>&#125;<br><br>- (void)addPanGestureForViewController:(UIViewController *)viewController &#123;<br>    UIPanGestureRecognizer *pan = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(handleGesture:)];<br>    pan.delegate = self;<br>    [viewController.view addGestureRecognizer:pan];<br>&#125;<br></code></pre></td></tr></table></figure><p>拖动手势是加在全屏上的，我们需要将它限制到屏幕左侧，这样才是侧滑返回，否则是全屏返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">#pragma mark - UIGestureRecognizerDelegate<br>/// 侧滑返回<br>- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer &#123;<br>    CGPoint location = [gestureRecognizer locationInView:gestureRecognizer.view];<br>    return location.x &lt; 50;<br>&#125;<br></code></pre></td></tr></table></figure><p>核心是处理手势交互转场的过程，我们需要更新转场百分比 <code>updateInteractiveTransition</code> ，标记 完成转场 <code>finishInteractiveTransition</code>  和取消转场 <code>cancelInteractiveTransition</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">/// 手势过渡的过程</span><br>- (<span class="hljs-type">void</span>)handleGesture:(<span class="hljs-built_in">UIPanGestureRecognizer</span> *)panGesture &#123;<br>    <span class="hljs-comment">// 手势百分比</span><br>    <span class="hljs-built_in">CGFloat</span> transitionX = [panGesture translationInView:panGesture.view].x;<br>    <span class="hljs-built_in">CGFloat</span> percent = transitionX / panGesture.view.frame.size.width;<br>    <span class="hljs-comment">// 侧滑速度，速度大于某值，判断完成</span><br>    <span class="hljs-built_in">CGFloat</span> velocityX = [panGesture velocityInView:panGesture.view].x;<br><br>    <span class="hljs-keyword">switch</span> (panGesture.state) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-built_in">UIGestureRecognizerStateBegan</span>:<br>            <span class="hljs-comment">// 手势开始的时候标记手势状态，并开始相应的事件</span><br>            <span class="hljs-keyword">self</span>.isTransitioning = <span class="hljs-literal">YES</span>;<br>            [<span class="hljs-keyword">self</span> startGesture];<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-built_in">UIGestureRecognizerStateChanged</span>:<br>            <span class="hljs-comment">// 手势过程中，通过updateInteractiveTransition设置转场的百分比</span><br>            [<span class="hljs-keyword">self</span> updateInteractiveTransition:percent];<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-built_in">UIGestureRecognizerStateEnded</span>:<br>            <span class="hljs-comment">// 手势完成后结束标记并且判断移动距离是否过半，过则finishInteractiveTransition完成转场操作，否者取消转场操作</span><br>            <span class="hljs-keyword">self</span>.isTransitioning = <span class="hljs-literal">NO</span>;<br>            <span class="hljs-keyword">if</span> (percent &gt; <span class="hljs-number">0.3</span> || velocityX &gt; <span class="hljs-number">300</span>) &#123;<br>                [<span class="hljs-keyword">self</span> finishInteractiveTransition];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                [<span class="hljs-keyword">self</span> cancelInteractiveTransition];<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br>- (<span class="hljs-type">void</span>)startGesture &#123;<br>    [_viewControllerDismissing dismissViewControllerAnimated:<span class="hljs-literal">YES</span> completion:<span class="hljs-literal">nil</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，整个交互转场的封装就完成了，下面来实现代理</p><h3 id="实现交互代理"><a href="#实现交互代理" class="headerlink" title="实现交互代理"></a>实现交互代理</h3><p>在要dismiss消失的vc中实现系统代理 <code>UIViewControllerTransitioningDelegate</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">// 创建交互转场对象<br>self.interactiveDismiss = [[WBHCPopInteractiveTransition alloc] initWithViewController:self.visibleViewController];<br><br><br>#pragma mark - UIViewControllerTransitioningDelegate<br>- (nullable id &lt;UIViewControllerInteractiveTransitioning&gt;)interactionControllerForDismissal:(id &lt;UIViewControllerAnimatedTransitioning&gt;)animator &#123;<br>    return _interactiveDismiss.isTransitioning ? _interactiveDismiss : nil;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样的话，整个侧滑返回的功能就实现了</p><p>至此，我们基本上就实现了以Push方式实现Present跳转，同时可以像原生导航一样进行侧滑返回</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/16/hello-world/"/>
    <url>/2022/09/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
